/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1 (1)
3: 1, 3 (1+2)
6: 1, 2, 3, 6 (1+2+3)
10: 1, 2, 5, 10 (1+2+3+4)
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
36: 1, 2, 3, 4,  6,  9, 12, 18, 36
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?
divisibleTriangleNumber(5) should return a number.
divisibleTriangleNumber(5) should return 28.
divisibleTriangleNumber(23) should return 630.
divisibleTriangleNumber(167) should return 1385280.
divisibleTriangleNumber(374) should return 17907120.
divisibleTriangleNumber(500) should return 76576500.
*/
function divisibleTriangleNumber(n) {
    if (n < 0) return 0;
    let numdivisors = 0;
    let sum = 0;
    let bigi = 1;
    let lastNum = 0;
    let divisorsList = [];
    while (numdivisors < n) {
        sum = sum + bigi;
        // Note that this loop runs till square root 
        for (let i=1; i<=Math.sqrt(sum); i++) 
        { 
            if (sum%i==0) 
            { 
                // If divisors are equal, print only one 
                if (sum / i == i) {
                    divisorsList.push(i);
                    numdivisors++;
                    lastNum = sum;
                }
                else { 
                    // Otherwise print both 
                    divisorsList.push(i, sum / i);
                    numdivisors = numdivisors + 2;
                    lastNum = sum;
                }
            } 
        } 
        // for (let i = 1; i <= sum; i++) {
        //     if (sum % i == 0) {
        //         numdivisors++;
        //         lastNum = sum;
        //         divisorsList.push(i);
        //     }
        // }
        if (numdivisors < n) {
            numdivisors = 0;
            divisorsList = [];
        }
        bigi++;
    }
    console.log(lastNum, ':', divisorsList.join());
    return lastNum;
}

function listDivisors(sum) {
    let divisorsList = [];
    // Note that this loop runs till square root 
    for (let i=1; i<=Math.sqrt(sum); i++) 
    { 
        if (sum%i==0) 
        { 
            // If divisors are equal, print only one 
            if (sum / i == i) {
                divisorsList.push(i);
            }
            else { 
                // Otherwise print both 
                divisorsList.push(i, sum / i);
            }
        } 
    } 
    console.log(sum, ':', divisorsList.join())
}

//36 : 1,36,2,18,3,12,4,9,6
listDivisors(36);
//100 : 1,100,2,50,4,25,5,20,10
//The divisors of 100 are: 
//1 2 4 5 10 20 25 50 100
listDivisors(100);
console.log('first divisible triangle number over n divisors', divisibleTriangleNumber(5));  
console.log('first divisible triangle number over n divisors', divisibleTriangleNumber(23));  
console.log('first divisible triangle number over n divisors', divisibleTriangleNumber(167));  
console.log('first divisible triangle number over n divisors', divisibleTriangleNumber(374));  
console.log('first divisible triangle number over n divisors', divisibleTriangleNumber(500));
  
